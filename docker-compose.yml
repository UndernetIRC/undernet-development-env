services:
  hub:
    image: ircu2:latest
    hostname: hub.undernet.org
    build:
      context: ircu2
      dockerfile: ../Dockerfile.ircu2
    ports:
      - "4400:4400"
      - "6669:6669"
    volumes:
      - ./etc/hub.conf:/ircd/etc/ircd.conf
      - ./etc/hub.motd:/ircd/etc/motd
    networks:
      undernet:
        ipv4_address: 10.5.0.10

  leaf:
    image: ircu2:latest
    hostname: leaf.undernet.org
    ports:
      - "4401:4400"
      - "6667:6667"
    volumes:
      - ./etc/leaf.conf:/ircd/etc/ircd.conf
      - ./etc/leaf.motd:/ircd/etc/motd
    depends_on:
      - hub
    networks:
      undernet:
        ipv4_address: 10.5.0.20

  api:
    #image: cservice-api:latest
    hostname: api.undernet.org
    build:
      context: cservice-api
      dockerfile_inline: |
        # Stage 0: Extract CA certificates
        FROM alpine:latest AS certs
        RUN apk add --update --no-cache ca-certificates

        # Stage 1: Build the Go binary
        FROM golang:1.24.2-alpine AS builder
        RUN apk add --no-cache git make bash
        WORKDIR /build
        COPY go.mod go.sum ./
        RUN go mod download
        COPY . .
        RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 LDFLAGS="-s -w" make build

        # Stage 2: Final minimal production image
        FROM alpine:latest
        RUN apk add --no-cache ca-certificates curl
        COPY --from=builder /build/bin/cservice-api /cservice-api
        EXPOSE 8080/tcp
        ENTRYPOINT ["/cservice-api"]
    environment:
      - CSERVICE_DATABASE_HOST=db
      - CSERVICE_REDIS_HOST=redis
      - USER=nobody
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mail:
        condition: service_started
    networks:
      undernet:
        ipv4_address: 10.5.0.25

  db:
    image: postgres:17-alpine
    hostname: db.undernet.org
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./dbinit:/docker-entrypoint-initdb.d
      - ./cservice-web:/cservice-web
      - ./gnuworld:/gnuworld
    environment:
      - POSTGRES_DB=cservice
      - POSTGRES_USER=cservice
      - POSTGRES_PASSWORD=cservice
      - POSTGRES_INITDB_ARGS="-E SQL_ASCII"
      - LANG=C
    healthcheck:
      test: ["CMD-SHELL", "/docker-entrypoint-initdb.d/healthcheck.sh"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    networks:
      undernet:
        ipv4_address: 10.5.0.30

  redis:
    image: valkey/valkey:7.2-alpine
    hostname: redis.undernet.org
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      undernet:
        ipv4_address: 10.5.0.35

  mail:
    image: axllent/mailpit
    hostname: mail.undernet.org
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      undernet:
        ipv4_address: 10.5.0.40

  web:
    build:
      context: ./cservice-web
    ports:
      - "8080:80"
    environment:
      - PHP_SHORT_OPEN_TAG=On
      - APACHE_ERRORLOG=/dev/stderr
      - LOCALDB_USER=cservice
      - LOCALDB_PASS=cservice
      - LOCALDB_HOST=db.undernet.org
      - REMOTEDB_NAME=cservice
      - REMOTEDB_USER=cservice
      - REMOTEDB_PASS=cservice
      - REMOTEDB_HOST=db.undernet.org
      - ENABLE_REGISTER_GLOBALS=1
      - LOG_LEVEL=Logger::DEBUG
      - LOG_STREAM_HANDLER=php://stdout
      - SMTPHOST=mail.undernet.org:1025
    volumes:
      - ./cservice-web:/app
    networks:
      undernet:
        ipv4_address: 10.5.0.50
    depends_on:
      db:
        condition: service_healthy
      mail:
        condition: service_started
      api:
        condition: service_healthy

  gnuworld:
    image: gnuworld:latest
    hostname: channels.undernet.org
    #entrypoint: /bin/sh -c "while true; do sleep 1; done"
    build:
      context: .
      dockerfile: Dockerfile.gnuworld
    volumes:
      - ./etc/gnuworld:/gnuworld/etc
    networks:
      undernet:
        ipv4_address: 10.5.0.60
    depends_on:
      db:
        condition: service_healthy
      hub:
        condition: service_started
      api:
        condition: service_healthy

volumes:
  pgdata:
  redisdata:

networks:
  undernet:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
